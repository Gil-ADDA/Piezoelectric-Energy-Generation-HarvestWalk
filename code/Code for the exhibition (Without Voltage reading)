#include <WiFiNINA.h>
#include <ArduinoHttpClient.h>
#include "secrets1.h"
#include <Adafruit_NeoPixel.h>

#define PIN            6  // Define the pin where the data line is connected to
#define NUMPIXELS      19 // Number of LEDs in the strip

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
unsigned long lightUpTime = 0;  // To track when the LED lit up
const unsigned long LED_ON_DURATION = 10000;  // 10 seconds

unsigned long lastSendTime = 0;
const unsigned long sendInterval = 15000; // 15 seconds

const int buttonPin = 2;    // Pin connected to the copper foil button
unsigned long pressStartTime = 0; // Variable to store the time when the button is pressed

int pressCount = 0;        // Variable to keep track of the number of button presses
int combinedPressCount = 0; // Variable to keep track of the combined count of both buttons

const int button2Pin = 3;  // Choose an appropriate unused pin, e.g., 3
unsigned long press2StartTime = 0; 
int press2Count = 0;
const int RESET_THRESHOLD = 10; // Adjust this value as needed

const char* host = "api.thingspeak.com";
const char* apiKey = "1VRREXWO4211YP3E"; 
WiFiClient wifi;
HttpClient client(wifi, host, 80);

int lastSentPressCount = 0;
int lastSentPress2Count = 0;
int lastSentCombinedPressCount = 0;

unsigned long lastResetTime = 0; // Variable to store the last time the press count was reset
const unsigned long resetInterval = 10800000;  // 3 hours in milliseconds

const int ledPin = 5;

// Function prototypes
void connectToWiFi();
void sendDataToThingSpeak(int pressCount, int press2Count, int combinedPressCount);
void indicateWiFiStatus();

void setup() {
  strip.begin();  // Initialize the LED strip
  strip.show();   // Initialize all pixels to 'off'

  pinMode(buttonPin, INPUT_PULLUP);  // Set the button pin as INPUT_PULLUP to enable the internal pull-up resistor
  pinMode(button2Pin, INPUT_PULLUP);
  pinMode(ledPin, OUTPUT); // Set pin 5 as an OUTPUT for the LED
  
  Serial.begin(9600);
  connectToWiFi();
  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  sendDataToThingSpeak(pressCount, press2Count, combinedPressCount);
}

void loop() {
  int buttonState = digitalRead(buttonPin);
  if (buttonState == LOW) {
    if (pressStartTime == 0) {
      pressStartTime = millis();
      Serial.println("Button pressed! Step detected.");
      pressCount++;
      combinedPressCount = pressCount + press2Count;
    }
  } else {
    if (pressStartTime != 0) {
      Serial.print("Press count (Left) : ");
      Serial.println(pressCount);
      Serial.print("Combined press count of both buttons: ");
      Serial.println(combinedPressCount);
      pressStartTime = 0;
    }
  }

  int button2State = digitalRead(button2Pin);
  if (button2State == LOW) {
    if (press2StartTime == 0) {
      press2StartTime = millis();
      Serial.println("Second button pressed! Step detected.");
      press2Count++;
      combinedPressCount++;
    }
  } else {
    if (press2StartTime != 0) {
      Serial.print("Press count for (Right)second button: ");
      Serial.println(press2Count);
      Serial.print("Combined press count of both buttons: ");
      Serial.println(combinedPressCount);
      press2StartTime = 0;
    }
  }

  if (combinedPressCount >= 9) {
    unsigned long currentTime = millis();
    if (combinedPressCount == 9 && lightUpTime == 0) {
        for (int i = 0; i < NUMPIXELS; i++) {
            strip.setPixelColor(i, strip.Color(0, 255, 0));
        }
        strip.show();
        lightUpTime = millis();
    }

    if (lightUpTime != 0 && (millis() - lightUpTime >= LED_ON_DURATION)) {
        combinedPressCount = 0;
        lightUpTime = 0;
        for (int i = 0; i < NUMPIXELS; i++) {
            strip.setPixelColor(i, strip.Color(0, 0, 0));
        }
        strip.show();
    }
  }

  if (WiFi.status() == WL_CONNECTED && millis() - lastSendTime >= sendInterval) {
    digitalWrite(ledPin, HIGH);
    delay(100);
    digitalWrite(ledPin, LOW);
    sendDataToThingSpeak(pressCount, press2Count, combinedPressCount);
    lastSendTime = millis();
  }

  if (millis() - lastResetTime >= resetInterval) {
    pressCount = 0;
    lastResetTime = millis();
    press2Count = 0;
  }

  delay(100);
  indicateWiFiStatus();
}

void sendDataToThingSpeak(int pressCount, int press2Count, int combinedPressCount) { 
   if (lastSentPressCount != pressCount || lastSentPress2Count != press2Count || lastSentCombinedPressCount != combinedPressCount) {
      digitalWrite(ledPin, HIGH);
      String url = String("/update?api_key=") + apiKey +
                   "&field3=" + String(pressCount) +
                   "&field4=" + String(press2Count) +
                   "&field5=" + String(combinedPressCount);  

      client.get(url);
      int statusCode = client.responseStatusCode();
      String response = client.responseBody();
      
      Serial.print("Sending Press Count: ");
      Serial.println(pressCount);
      Serial.print("Status code: ");
      Serial.println(statusCode);
      Serial.print("Response: ");
      Serial.println(response);

      digitalWrite(ledPin, LOW);
      lastSentPressCount = pressCount;
      lastSentPress2Count = press2Count;
      lastSentCombinedPressCount = combinedPressCount;
   }
}

void connectToWiFi() {
  int retries = 0;
  const int maxRetries = 10;
  
  while (WiFi.status() != WL_CONNECTED && retries < maxRetries) {
    WiFi.begin(ssid, password);
    Serial.println("Connecting to WiFi...");
    delay(500);
    retries++;
  }

  if (retries == maxRetries) {
    Serial.println("Failed to connect to WiFi after maximum retries.");
    WiFi.disconnect();
    delay(2000);
    connectToWiFi();
  }
}

void indicateWiFiStatus() {
  if (WiFi.status() == WL_CONNECTED) {
    digitalWrite(ledPin, HIGH);
  } else {
    static unsigned long lastBlinkTime = 0;
    const unsigned long blinkInterval = 1000;
    if (millis() - lastBlinkTime >= blinkInterval) {
      lastBlinkTime = millis();
      digitalWrite(ledPin, !digitalRead(ledPin));
    }
  }
}
